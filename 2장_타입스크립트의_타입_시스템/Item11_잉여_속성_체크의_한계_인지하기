# 📕읽은내용 정리해보기



## 📚 Item 11 객체 래퍼 타입 피하기

타입이 명시된 변수에 객체 리터럴을 할당할 때 타입스크립트는 해당 타입의 속성이 있는지, 그리고 그 외의 속성은 없는지 확인한다. 
```ts
interface Room {
  numDoors: number;
  ceilingHeightFt: number;
}
const r: Room = {
  numDoors: 1,
  ceilingHeightFt: 10,
  elephant: 'present',
// ~~~~~~~~~~~~~~~~~~ Object literal may only specify known properties,
//                    and 'elephant' does not exist in type 'Room'
};
```
Room 타입에 쌩둥맞게 elephant 속성이 있는 것이 어색하긴 하지만, 구조적 타이핑 관점으로 생각해보면 오류가 발생하지 않아야 한다.   
임시 변수를 도입해 보면 알 수 있는데, obj 객체는 Room 타입에 할당이 가능하다. 

```ts
interface Room {
  numDoors: number;
  ceilingHeightFt: number;
}
const obj = {
  numDoors: 1,
  ceilingHeightFt: 10,
  elephant: 'present',
};
const r: Room = obj;  // OK
```

obj 타입은 Room 타입의 부분 집합을 포함하므로, Room에 할당 가능하며 타입 체커도 통과한다.

두 예제의 차이를 본다면 첫 번째 예제에서는 '잉여 속성 체크'라는 과정이 수행   
그러나 잉여 속성 체크 역시 조건에 따라 동작하지 않는다는 한계가 존재
잉여 속성 체크가 할당 가능 검사와는 별도의 과정이라는 것을 알아야 타입스크립트 타입 시스템에 대한 개념을 정확히 잡을 수 있다.    


```ts
interface Room {
  numDoors: number;
  ceilingHeightFt: number;
}
function setDarkMode() {}
interface Options {
  title: string;
  darkMode?: boolean;
}
const o1: Options = document;  // OK
const o2: Options = new HTMLAnchorElement;  // OK
```

document와 HTMLAnchorElement의 인스턴스 모두 string 타입인 title속성을 가지고 있기 때문에 할당문은 정상이다.
